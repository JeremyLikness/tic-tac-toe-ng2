{"version":3,"file":"bad-turn.service.spec.js","sourceRoot":"","sources":["bad-turn.service.spec.ts"],"names":[],"mappings":";AAAA,wBAAgE,uBAAuB,CAAC,CAAA;AACxF,iCAA6B,oBAAoB,CAAC,CAAA;AAElD,kBAAQ,CAAC,kBAAkB,EAAE;IAC3B,6BAAmB,CAAC,cAAM,OAAA,CAAC,iCAAc,CAAC,EAAhB,CAAgB,CAAC,CAAC;IAE5C,YAAE,CAAC,iDAAiD,EACjD,gBAAM,CAAC,CAAC,iCAAc,CAAC,EAAE,UAAC,OAAuB;QAC/C,IAAI,KAAK,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;QACjC,gBAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QAC5B,gBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;QAClC,gBAAM,CAAC,OAAO,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC,CAAC;IAEP,YAAE,CAAC,0BAA0B,EAAE,gBAAM,CAAC,CAAC,iCAAc,CAAC,EAAE,UAAC,OAAuB;QAC3E,IAAI,IAAI,GAA+B,EAAE,CAAC;QAC1C,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;YACxD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;QACpC,CAAC;QAED,IAAI,CAAC,GAAG,IAAI,EAAE,IAAI,GAAG,KAAK,CAAC;QAC3B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACtB,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,GAAG,IAAI,CAAC;YAClC,IAAI,GAAG,IAAI,CAAC;YACZ,GAAG,CAAC,CAAC,IAAI,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC;gBAC3B,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;YACjC,CAAC;YACD,CAAC,IAAI,CAAC,CAAC;QACT,CAAC;QAED,GAAG,CAAC,CAAC,IAAI,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC;YAC3B,gBAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,CAAC;IACH,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC","sourcesContent":["import {beforeEachProviders, it, describe, expect, inject} from '@angular/core/testing';\r\nimport {BadTurnService} from './bad-turn.service';\r\n\r\ndescribe('Bad Turn Service', () => {\r\n  beforeEachProviders(() => [BadTurnService]);\r\n\r\n  it('should return a quote when getBadTurn is called',\r\n     inject([BadTurnService], (service: BadTurnService) => {\r\n       var quote = service.getBadTurn();\r\n       expect(quote).toBeDefined();\r\n       expect(quote.length).toBeTruthy();\r\n       expect(typeof quote).toBe(\"string\");\r\n     }));\r\n\r\n  it('should return all quotes', inject([BadTurnService], (service: BadTurnService) => {\r\n       var test: {[quote: string]: boolean} = {};\r\n       for (let idx = 0; idx < service.quotes.length; idx += 1) {\r\n         test[service.quotes[idx]] = false;\r\n       }\r\n\r\n       let i = 1000, done = false;\r\n       while (i > 0 && !done) {\r\n         test[service.getBadTurn()] = true;\r\n         done = true;\r\n         for (let quoteTest in test) {\r\n           done = done && test[quoteTest];\r\n         }\r\n         i -= 1;\r\n       }\r\n\r\n       for (let quoteTest in test) {\r\n         expect(test[quoteTest]).toBe(true);\r\n       }\r\n     }));\r\n});\r\n"]}