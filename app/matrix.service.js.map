{"version":3,"file":"matrix.service.js","sourceRoot":"","sources":["matrix.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\r\n\r\nexport enum State {\r\n  None = 0,\r\n  X = 1,\r\n  O = 2\r\n}\r\n\r\nexport enum GameState {\r\n  XTurn = 0,\r\n  OTurn = 1,\r\n  Won = 2,\r\n  Draw = 3\r\n}\r\n\r\nexport interface ICell {\r\n  row: number;\r\n  col: number;\r\n  state: State;\r\n  winningCell: boolean;\r\n}\r\n\r\nexport type IRow = ICell[];\r\n\r\n@Injectable()\r\nexport class MatrixService {\r\n  public rows: IRow[] = [];\r\n\r\n  public gameState: GameState;\r\n  public computerTurn: GameState;\r\n  public computerWon: boolean = false;\r\n\r\n  public winLines: IRow[] = [];\r\n  private _cells: ICell[] = [];\r\n\r\n  constructor() { this.reset(); }\r\n\r\n  public reset(): void {\r\n    while (this.rows.pop())\r\n      ;\r\n    while (this._cells.pop())\r\n      ;\r\n    while (this.winLines.pop())\r\n      ;\r\n\r\n    this.gameState = GameState.XTurn;\r\n\r\n    for (let row = 0; row < 3; row += 1) {\r\n      let newRow = [];\r\n      this.rows.push(newRow);\r\n      for (let col = 0; col < 3; col += 1) {\r\n        let newCell = {row: row, col: col, state: State.None, winningCell: false};\r\n        newRow.push(newCell);\r\n        this._cells.push(newCell);\r\n      }\r\n    }\r\n\r\n    // construct all combinations of winning lines\r\n\r\n    // top row\r\n    let topRow = this.rows[0];\r\n    this.winLines.push(topRow);\r\n\r\n    // middle row\r\n    let middleRow = this.rows[1];\r\n    this.winLines.push(middleRow);\r\n\r\n    // bottom row\r\n    let bottomRow = this.rows[2];\r\n    this.winLines.push(bottomRow);\r\n\r\n    // left column\r\n    let leftColumn = [this.rows[0][0], this.rows[1][0], this.rows[2][0]];\r\n    this.winLines.push(leftColumn);\r\n\r\n    // middle column\r\n    let middleColumn = [this.rows[0][1], this.rows[1][1], this.rows[2][1]];\r\n    this.winLines.push(middleColumn);\r\n\r\n    // right column\r\n    let rightColumn = [this.rows[0][2], this.rows[1][2], this.rows[2][2]];\r\n    this.winLines.push(rightColumn);\r\n\r\n    // middle column\r\n    let leftTopDiagonal = [this.rows[0][0], this.rows[1][1], this.rows[2][2]];\r\n    this.winLines.push(leftTopDiagonal);\r\n\r\n    // middle column\r\n    let leftBottomDiagonal = [this.rows[2][0], this.rows[1][1], this.rows[0][2]];\r\n    this.winLines.push(leftBottomDiagonal);\r\n\r\n    this.computerTurn = Math.random() < 0.5 ? GameState.XTurn : GameState.OTurn;\r\n  }\r\n\r\n  public advanceBoardState(): void {\r\n    // check for win\r\n    let won = false, computerState = this.computerTurn === GameState.XTurn ? State.X : State.O;\r\n\r\n    for (let x = 0; !won && x < this.winLines.length; x += 1) {\r\n      let row = this.winLines[x];\r\n      if (this.won(row)) {\r\n        won = true;\r\n        for (let y = 0; y < row.length; y += 1) {\r\n          row[y].winningCell = true;\r\n          this.computerWon = computerState === row[y].state;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (won) {\r\n      this.gameState = GameState.Won;\r\n      return;\r\n    }\r\n\r\n    let draw = true;\r\n\r\n    // check for draw\r\n    for (let x = 0; draw && x < this._cells.length; x += 1) {\r\n      if (this._cells[x].state === State.None) {\r\n        draw = false;\r\n      }\r\n    }\r\n\r\n    if (draw) {\r\n      this.gameState = GameState.Draw;\r\n      return;\r\n    }\r\n\r\n    // more comprehensive check for draw\r\n    draw = true;\r\n\r\n    for (let x = 0; draw && x < this.winLines.length; x += 1) {\r\n      draw = this.draw(this.winLines[x]);\r\n    }\r\n\r\n    if (draw) {\r\n      this.gameState = GameState.Draw;\r\n      return;\r\n    }\r\n\r\n    this.gameState = this.gameState === GameState.XTurn ? GameState.OTurn : GameState.XTurn;\r\n  }\r\n\r\n  public draw(row: IRow): boolean {\r\n    let hasX = false, hasO = false;\r\n    for (let y = 0; y < row.length; y += 1) {\r\n      hasX = hasX || row[y].state === State.X;\r\n      hasO = hasO || row[y].state === State.O;\r\n    }\r\n    return hasX && hasO;\r\n  }\r\n\r\n  public won(row: IRow): boolean {\r\n    return row[0].state != State.None && row[0].state === row[1].state &&\r\n           row[1].state === row[2].state;\r\n  }\r\n}\r\n"]}