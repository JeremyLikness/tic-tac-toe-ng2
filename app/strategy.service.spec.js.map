{"version":3,"file":"strategy.service.spec.js","sourceRoot":"","sources":["strategy.service.spec.ts"],"names":[],"mappings":";AAAA,wBAAgE,uBAAuB,CAAC,CAAA;AACxF,8BAA2B,iBAAiB,CAAC,CAAA;AAC7C,8BAA2B,iBAAiB,CAAC,CAAA;AAC7C,+BAAiC,kBAAkB,CAAC,CAAA;AAEpD;IACE,MAAM,CAAC;QACL;YACE,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,sBAAK,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,EAAC;YACvD,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,sBAAK,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,EAAC;YACvD,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,sBAAK,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,EAAC;SACxD;KACF,CAAA;AACH,CAAC;AAED,mBAAmB,IAAY,EAAE,UAAiB;IAChD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QAC9C,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;YACnD,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC;QACpC,CAAC;IACH,CAAC;IACD,MAAM,CAAC,IAAI,CAAC;AACd,CAAC;AAED,kBAAkB,IAAY,EAAE,YAAmB;IACjD,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QAC9C,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;YACnD,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,YAAY,CAAC,CAAC,CAAC;gBACzC,KAAK,IAAI,CAAC,CAAC;YACb,CAAC;QACH,CAAC;IACH,CAAC;IACD,MAAM,CAAC,KAAK,CAAC;AACf,CAAC;AAED,+BAA+B,QAAiB;IAC9C,IAAI,IAAI,GAAW,EAAE,CAAC;IACtB,IAAI,MAAM,GAAY;QACpB,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,KAAK,EAAC;QACxD,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,KAAK,EAAC;QACxD,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,KAAK,EAAC;KACzD,CAAC;IACF,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAElB,IAAI,SAAS,GAAY;QACvB,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,KAAK,EAAC;QACxD,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,KAAK,EAAC;QACxD,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,KAAK,EAAC;KACzD,CAAC;IACF,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAErB,IAAI,SAAS,GAAY;QACvB,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,KAAK,EAAC;QACxD,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,KAAK,EAAC;QACxD,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,KAAK,EAAC;KACzD,CAAC;IACF,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAErB,MAAM,CAAC,IAAI,CAAC;AACd,CAAC;AAED,kBAAQ,CAAC,kBAAkB,EAAE;IAE3B,kBAAQ,CAAC,eAAe,EAAE;QAExB,YAAE,CAAC,iDAAiD,EAAE;YACpD,IAAI,IAAI,GAAG,SAAS,CAAC,UAAU,EAAE,EAAE,sBAAK,CAAC,CAAC,CAAC,CAAC;YAC5C,4BAAY,CAAC,IAAI,EAAE,sBAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;gBAC9C,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;oBACnD,gBAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,sBAAK,CAAC,CAAC,CAAC,CAAC;gBAC7C,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,YAAE,CAAC,oDAAoD,EAAE;YACvD,IAAI,IAAI,GAAG,UAAU,EAAE,CAAC;YAExB,4BAAY,CAAC,IAAI,EAAE,sBAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,gBAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,sBAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAExC,4BAAY,CAAC,IAAI,EAAE,sBAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,gBAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,sBAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAExC,4BAAY,CAAC,IAAI,EAAE,sBAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,gBAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,sBAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;IAEH,kBAAQ,CAAC,eAAe,EAAE;QAExB,YAAE,CAAC,wCAAwC,EAAE;YAE3C,IAAI,IAAI,GAAG,SAAS,CAAC,UAAU,EAAE,EAAE,sBAAK,CAAC,CAAC,CAAC,CAAC;YAC5C,4BAAY,CAAC,IAAI,EAAE,sBAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;gBAC9C,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;oBACnD,gBAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,sBAAK,CAAC,CAAC,CAAC,CAAC;gBAC7C,CAAC;YACH,CAAC;QAEH,CAAC,CAAC,CAAC;QAEH,YAAE,CAAC,8BAA8B,EAAE;YACjC,IAAI,IAAI,GACA;gBACE,sBAAK,CAAC,CAAC;gBACP,sBAAK,CAAC,CAAC;gBACP,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,CAAC;gBACP,sBAAK,CAAC,CAAC;gBACP,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,IAAI;aACX,EACL,SAAS,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAE5C,4BAAY,CAAC,SAAS,EAAE,sBAAK,CAAC,CAAC,CAAC,CAAC;YAEjC,gBAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,sBAAK,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,YAAE,CAAC,8DAA8D,EAAE;YACjE,IAAI,IAAI,GACA;gBACE,sBAAK,CAAC,CAAC;gBACP,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,CAAC;gBACP,sBAAK,CAAC,CAAC;gBACP,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,CAAC;gBACP,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,IAAI;aACX,EACL,SAAS,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAE5C,4BAAY,CAAC,SAAS,EAAE,sBAAK,CAAC,CAAC,CAAC,CAAC;YAEjC,gBAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,sBAAK,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,YAAE,CAAC,iEAAiE,EAAE;YACpE,IAAI,IAAI,GACA;gBACE,sBAAK,CAAC,CAAC;gBACP,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,CAAC;gBACP,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,IAAI;aACX,EACL,SAAS,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAE5C,4BAAY,CAAC,SAAS,EAAE,sBAAK,CAAC,CAAC,CAAC,CAAC;YAEjC,gBAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,sBAAK,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,sBAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;QAEH,YAAE,CAAC,4CAA4C,EAAE;YAC/C,IAAI,IAAI,GACA;gBACE,sBAAK,CAAC,CAAC;gBACP,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,CAAC;gBACP,sBAAK,CAAC,CAAC;gBACP,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,IAAI;gBACV,sBAAK,CAAC,CAAC;gBACP,sBAAK,CAAC,CAAC;gBACP,sBAAK,CAAC,IAAI;aACX,EACL,SAAS,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAE5C,4BAAY,CAAC,SAAS,EAAE,sBAAK,CAAC,CAAC,CAAC,CAAC;YAEjC,gBAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,sBAAK,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,sBAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","sourcesContent":["import {beforeEachProviders, it, describe, expect, inject} from '@angular/core/testing';\r\nimport {easyStrategy} from './strategy-easy';\r\nimport {hardStrategy} from './strategy-hard';\r\nimport {IRow, ICell, State} from './matrix.service';\r\n\r\nfunction emptyBoard(): IRow[] {\r\n  return [\r\n    [\r\n      {row: 0, col: 0, state: State.None, winningCell: false},\r\n      {row: 0, col: 1, state: State.None, winningCell: false},\r\n      {row: 0, col: 2, state: State.None, winningCell: false}\r\n    ]\r\n  ]\r\n}\r\n\r\nfunction fillBoard(rows: IRow[], targetFill: State): IRow[] {\r\n  for (let idx = 0; idx < rows.length; idx += 1) {\r\n    for (let col = 0; col < rows[idx].length; col += 1) {\r\n      rows[idx][col].state = targetFill;\r\n    }\r\n  }\r\n  return rows;\r\n}\r\n\r\nfunction getCount(rows: IRow[], stateToCount: State): number {\r\n  var count = 0;\r\n  for (let idx = 0; idx < rows.length; idx += 1) {\r\n    for (let col = 0; col < rows[idx].length; col += 1) {\r\n      if (rows[idx][col].state == stateToCount) {\r\n        count += 1;\r\n      }\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\nfunction fillBoardWithTemplate(template: State[]) {\r\n  var rows: IRow[] = [];\r\n  let topRow: ICell[] = [\r\n    {row: 0, col: 0, state: template[0], winningCell: false},\r\n    {row: 0, col: 1, state: template[1], winningCell: false},\r\n    {row: 0, col: 2, state: template[2], winningCell: false}\r\n  ];\r\n  rows.push(topRow);\r\n\r\n  let middleRow: ICell[] = [\r\n    {row: 1, col: 0, state: template[3], winningCell: false},\r\n    {row: 1, col: 1, state: template[4], winningCell: false},\r\n    {row: 1, col: 2, state: template[5], winningCell: false}\r\n  ];\r\n  rows.push(middleRow);\r\n\r\n  let bottomRow: ICell[] = [\r\n    {row: 2, col: 0, state: template[6], winningCell: false},\r\n    {row: 2, col: 1, state: template[7], winningCell: false},\r\n    {row: 2, col: 2, state: template[8], winningCell: false}\r\n  ];\r\n  rows.push(bottomRow);\r\n\r\n  return rows;\r\n}\r\n\r\ndescribe('Strategy Service', () => {\r\n\r\n  describe('Easy Strategy', () => {\r\n\r\n    it('should not update anything if the board is full', () => {\r\n      let test = fillBoard(emptyBoard(), State.X);\r\n      easyStrategy(test, State.O);\r\n      for (let idx = 0; idx < test.length; idx += 1) {\r\n        for (let col = 0; col < test[idx].length; col += 1) {\r\n          expect(test[idx][col].state).toBe(State.X);\r\n        }\r\n      }\r\n    });\r\n\r\n    it('should fill any random remaining slot on the board', () => {\r\n      let test = emptyBoard();\r\n\r\n      easyStrategy(test, State.O);\r\n      expect(getCount(test, State.O)).toBe(1);\r\n\r\n      easyStrategy(test, State.O);\r\n      expect(getCount(test, State.O)).toBe(2);\r\n\r\n      easyStrategy(test, State.O);\r\n      expect(getCount(test, State.O)).toBe(3);\r\n    });\r\n\r\n  });\r\n\r\n  describe('Hard Strategy', () => {\r\n\r\n    it('should do nothing if the board is full', () => {\r\n\r\n      let test = fillBoard(emptyBoard(), State.X);\r\n      hardStrategy(test, State.O);\r\n      for (let idx = 0; idx < test.length; idx += 1) {\r\n        for (let col = 0; col < test[idx].length; col += 1) {\r\n          expect(test[idx][col].state).toBe(State.X);\r\n        }\r\n      }\r\n\r\n    });\r\n\r\n    it('should always go for the win', () => {\r\n      let test =\r\n              [\r\n                State.X,\r\n                State.X,\r\n                State.None,\r\n                State.O,\r\n                State.O,\r\n                State.None,\r\n                State.None,\r\n                State.None,\r\n                State.None\r\n              ],\r\n          testBoard = fillBoardWithTemplate(test);\r\n\r\n      hardStrategy(testBoard, State.X);\r\n\r\n      expect(testBoard[0][2].state).toBe(State.X);\r\n    });\r\n\r\n    it('should always block the opponent if the win is not available', () => {\r\n      let test =\r\n              [\r\n                State.X,\r\n                State.None,\r\n                State.None,\r\n                State.O,\r\n                State.O,\r\n                State.None,\r\n                State.X,\r\n                State.None,\r\n                State.None\r\n              ],\r\n          testBoard = fillBoardWithTemplate(test);\r\n\r\n      hardStrategy(testBoard, State.X);\r\n\r\n      expect(testBoard[1][2].state).toBe(State.X);\r\n    });\r\n\r\n    it('should prefer building a winning row over blocking the opponent', () => {\r\n      let test =\r\n              [\r\n                State.X,\r\n                State.None,\r\n                State.None,\r\n                State.O,\r\n                State.None,\r\n                State.None,\r\n                State.None,\r\n                State.None,\r\n                State.None\r\n              ],\r\n          testBoard = fillBoardWithTemplate(test);\r\n\r\n      hardStrategy(testBoard, State.X);\r\n\r\n      expect(testBoard[0][1].state === State.X || testBoard[0][2].state === State.X).toBe(true);\r\n    });\r\n\r\n    it('should ignore rows that are already a draw', () => {\r\n      let test =\r\n              [\r\n                State.X,\r\n                State.None,\r\n                State.O,\r\n                State.X,\r\n                State.None,\r\n                State.None,\r\n                State.O,\r\n                State.X,\r\n                State.None\r\n              ],\r\n          testBoard = fillBoardWithTemplate(test);\r\n\r\n      hardStrategy(testBoard, State.X);\r\n\r\n      expect(testBoard[1][1].state === State.X || testBoard[1][2].state === State.X).toBe(true);\r\n    });\r\n\r\n  });\r\n\r\n});\r\n"]}