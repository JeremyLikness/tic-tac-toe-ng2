{"version":3,"file":"strategy-hard.js","sourceRoot":"","sources":["strategy-hard.ts"],"names":[],"mappings":"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","sourcesContent":["import {IRow, ICell, State} from './matrix.service';\r\n\r\nexport enum RowValue {\r\n  Draw = 0,\r\n  Empty = 1,\r\n  OneOpponent = 10,\r\n  OneMine = 50,\r\n  TwoOpponent = 100,\r\n  TwoMine = 1000\r\n}\r\n\r\nexport interface IRank { id: number, weight: number, cell: ICell }\r\n\r\nexport function hardStrategy(rows: IRow[], targetState: State): void {\r\n  let idFunc = (cell: ICell) => cell.row * 3 + cell.col, rank: IRank[] = [];\r\n\r\n  for (let x = 0; x < 9; x += 1) {\r\n    rank.push({id: x, weight: 0, cell: null});\r\n  }\r\n\r\n  for (let x = 0; x < rows.length; x += 1) {\r\n    let row = rows[x], myCount = 0, theirCount = 0, value = RowValue.Draw;\r\n    for (let y = 0; y < row.length; y += 1) {\r\n      let cell = row[y], id = idFunc(cell);\r\n      if (rank[id].cell === null) {\r\n        rank[id].cell = cell;\r\n      }\r\n      if (cell.state !== State.None) {\r\n        rank[id].weight = -99999;\r\n        if (cell.state === targetState) {\r\n          myCount += 1;\r\n        } else {\r\n          theirCount += 1;\r\n        }\r\n      }\r\n    }\r\n    if (myCount === 0) {\r\n      value = theirCount === 0 ? RowValue.Empty :\r\n                                 (theirCount === 1 ? RowValue.OneOpponent : RowValue.TwoOpponent);\r\n    } else {\r\n      value =\r\n          theirCount > 0 ? RowValue.Draw : (myCount === 1 ? RowValue.OneMine : RowValue.TwoMine);\r\n    }\r\n    for (let y = 0; y < row.length; y += 1) {\r\n      let cell = row[y], id = idFunc(cell);\r\n      rank[id].weight += value;\r\n    }\r\n  }\r\n\r\n  rank.sort((a, b) => b.weight - a.weight);\r\n\r\n  let shortList: ICell[] = [], weight = rank[0].weight;\r\n\r\n  shortList.push(rank[0].cell);\r\n  for (let x = 1; x < rank.length; x += 1) {\r\n    if (rank[x].weight === weight) {\r\n      shortList.push(rank[x].cell);\r\n    }\r\n  }\r\n\r\n  shortList.sort(() => 0.5 - Math.random());\r\n  var cell: ICell;\r\n  while (cell = shortList.pop()) {\r\n    if (cell.state === State.None) {\r\n      cell.state = targetState;\r\n      break;\r\n    }\r\n  }\r\n}"]}