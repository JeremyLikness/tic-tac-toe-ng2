{"version":3,"file":"strategy.service.js","sourceRoot":"","sources":["strategy.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AAEzC,8BAA2B,iBAAiB,CAAC,CAAA;AAC7C,8BAA4C,iBAAiB,CAAC,CAAA;AAG9D;IACE;QAEO,aAAQ,GAAY,KAAK,CAAC;IAFlB,CAAC;IAIT,yCAAe,GAAtB,UAAuB,IAAY,EAAE,WAAkB;QACrD,IAAI,QAAQ,GACR,IAAI,CAAC,QAAQ,GAAG,4BAAY,GAAG,4BAAY,CAAC;QAChD,QAAQ,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAC9B,CAAC;IAVH;QAAC,iBAAU,EAAE;;uBAAA;IAWb,sBAAC;AAAD,CAAC,AAVD,IAUC;AAVY,uBAAe,kBAU3B,CAAA","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {IRow, ICell, State} from './matrix.service';\r\nimport {easyStrategy} from './strategy-easy';\r\nimport {RowValue, IRank, hardStrategy} from './strategy-hard';\r\n\r\n@Injectable()\r\nexport class StrategyService {\r\n  constructor() {}\r\n\r\n  public easyMode: boolean = false;\r\n\r\n  public executeStrategy(rows: IRow[], targetState: State) {\r\n    let strategy: (rows: IRow[], targetState: State) => void =\r\n        this.easyMode ? easyStrategy : hardStrategy;\r\n    strategy(rows, targetState);\r\n  }\r\n}"]}