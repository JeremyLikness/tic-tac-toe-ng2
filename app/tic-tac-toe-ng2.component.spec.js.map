{"version":3,"file":"tic-tac-toe-ng2.component.spec.js","sourceRoot":"","sources":["tic-tac-toe-ng2.component.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {beforeEachProviders, describe, expect, it, inject} from '@angular/core/testing';\r\nimport {TicTacToeNg2AppComponent} from '../app/tic-tac-toe-ng2.component';\r\nimport {MatrixService, IRow, ICell, State, GameState} from '../app/matrix.service';\r\nimport {StrategyService} from '../app/strategy.service';\r\n\r\nbeforeEachProviders(() => [TicTacToeNg2AppComponent, MatrixService, StrategyService]);\r\n\r\nlet drawBoard = {\r\n  0: State.X,\r\n  1: State.O,\r\n  2: State.X,\r\n  3: State.O,\r\n  4: State.O,\r\n  5: State.X,\r\n  6: State.X,\r\n  7: State.X,\r\n  8: State.O\r\n};\r\n\r\nfunction triggerDraw(rows: IRow[]) {\r\n  let x = true;\r\n  for (let idx = 0; idx < 3; idx += 1) {\r\n    let row = rows[idx];\r\n    for (let col = 0; col < row.length; col += 1) {\r\n      let cell = row[col];\r\n      cell.state = drawBoard[cell.row * 3 + cell.col];\r\n    }\r\n  }\r\n}\r\n\r\nfunction triggerWin(rows: IRow[], targetState: State) {\r\n  for (let idx = 0; idx < 3; idx += 1) {\r\n    let row = rows[idx];\r\n    for (let col = 0; col < row.length; col += 1) {\r\n      let cell = row[col];\r\n      cell.state = targetState;\r\n    }\r\n  }\r\n}\r\n\r\nfunction initApp(app: TicTacToeNg2AppComponent) {\r\n  app.slowComputer = false;\r\n  app.ngOnInit();\r\n}\r\n\r\nfunction emulateGameMove(app: TicTacToeNg2AppComponent, matrix: MatrixService,\r\n                         targetState: GameState) {\r\n  matrix.gameState = targetState;\r\n  app.stateChange(matrix.winLines[0][0]);\r\n}\r\n\r\ndescribe('App: TicTacToeNg2', () => {\r\n\r\n  it('should create the app',\r\n     inject([TicTacToeNg2AppComponent],\r\n            (app: TicTacToeNg2AppComponent) => { expect(app).toBeTruthy(); }));\r\n\r\n  it('should initialize the matrix',\r\n     inject([TicTacToeNg2AppComponent], (app: TicTacToeNg2AppComponent) => {\r\n       expect(app.rows).toBeDefined();\r\n       expect(app.rows.length).toBe(3);\r\n       expect(app.rows[0].length).toBe(3);\r\n     }));\r\n\r\n  it('should set your turn', inject([TicTacToeNg2AppComponent, MatrixService],\r\n                                    (app: TicTacToeNg2AppComponent, matrix: MatrixService) => {\r\n\r\n                                      initApp(app);\r\n                                      expect(app.yourTurn).toBe(true);\r\n\r\n                                    }));\r\n\r\n  it('should set whether or not you are \"X\"',\r\n     inject([TicTacToeNg2AppComponent, MatrixService],\r\n            (app: TicTacToeNg2AppComponent, matrix: MatrixService) => {\r\n              initApp(app);\r\n              expect(app.youAreX).toBe(matrix.computerTurn === GameState.XTurn ? false : true);\r\n            }));\r\n\r\n  describe('updateStats()', () => {\r\n    it('should set your turn to false when game is won',\r\n       inject([TicTacToeNg2AppComponent, MatrixService],\r\n              (app: TicTacToeNg2AppComponent, matrix: MatrixService) => {\r\n                initApp(app);\r\n\r\n                expect(app.won).toBe(false);\r\n                expect(app.draw).toBe(false);\r\n                expect(app.yourTurn).toBe(true);\r\n\r\n                triggerWin(matrix.winLines, State.X);\r\n                emulateGameMove(app, matrix, GameState.XTurn);\r\n\r\n                expect(app.won).toBe(true);\r\n                expect(app.draw).toBe(false);\r\n                expect(app.yourTurn).toBe(false);\r\n              }));\r\n\r\n    it('should set your turn to false when the game is a draw',\r\n       inject([TicTacToeNg2AppComponent, MatrixService], (app: TicTacToeNg2AppComponent,\r\n                                                          matrix: MatrixService) => {\r\n         initApp(app);\r\n\r\n         expect(app.won).toBe(false);\r\n         expect(app.yourTurn).toBe(true);\r\n         triggerDraw(matrix.winLines);\r\n\r\n         let cell = matrix.winLines[0][0];\r\n         emulateGameMove(app, matrix, cell.state === State.X ? GameState.XTurn : GameState.OTurn);\r\n\r\n         expect(app.won).toBe(false);\r\n         expect(app.draw).toBe(true);\r\n         expect(app.yourTurn).toBe(false);\r\n       }));\r\n\r\n    it('should set computer won to true when computer wins',\r\n       inject([TicTacToeNg2AppComponent, MatrixService],\r\n              (app: TicTacToeNg2AppComponent, matrix: MatrixService) => {\r\n                initApp(app);\r\n\r\n                expect(app.computerWon).toBe(false);\r\n                expect(app.won).toBe(false);\r\n\r\n                let computerState = matrix.computerTurn === GameState.XTurn ? State.X : State.O;\r\n                triggerWin(matrix.winLines, computerState);\r\n                emulateGameMove(app, matrix, matrix.computerTurn);\r\n\r\n                expect(app.computerWon).toBe(true);\r\n                expect(app.won).toBe(true);\r\n              }));\r\n\r\n    it('should set computer won to false when computer loses',\r\n       inject([TicTacToeNg2AppComponent, MatrixService], (app: TicTacToeNg2AppComponent,\r\n                                                          matrix: MatrixService) => {\r\n         initApp(app);\r\n\r\n         expect(app.computerWon).toBe(false);\r\n         expect(app.won).toBe(false);\r\n\r\n         let userState = matrix.computerTurn === GameState.OTurn ? State.X : State.O;\r\n         triggerWin(matrix.winLines, userState);\r\n         emulateGameMove(app, matrix, matrix.computerTurn === GameState.XTurn ? GameState.OTurn :\r\n                                                                                GameState.XTurn);\r\n\r\n         expect(app.computerWon).toBe(false);\r\n         expect(app.won).toBe(true);\r\n       }));\r\n\r\n    it('should call the computer to execute a turn when it is the computer turn',\r\n       inject([TicTacToeNg2AppComponent, StrategyService, MatrixService],\r\n              (app: TicTacToeNg2AppComponent, strategy: StrategyService, matrix: MatrixService) => {\r\n                initApp(app);\r\n\r\n                spyOn(strategy, 'executeStrategy');\r\n                expect(strategy.executeStrategy).not.toHaveBeenCalled();\r\n\r\n                matrix.gameState = matrix.computerTurn;\r\n                app.ngOnInit();  // fire the status update\r\n\r\n                expect(strategy.executeStrategy).toHaveBeenCalled();\r\n              }));\r\n\r\n  });\r\n\r\n  describe('stateChange()', () => {\r\n\r\n    it('should set the state of the cell based on the current game state',\r\n       inject([TicTacToeNg2AppComponent, MatrixService],\r\n              (app: TicTacToeNg2AppComponent, matrix: MatrixService) => {\r\n                initApp(app);\r\n\r\n                let testCell = matrix.winLines[0][0];\r\n                if (testCell.state != State.None) {\r\n                  testCell = matrix.winLines[0][1];\r\n                }\r\n\r\n                expect(testCell.state).toBe(State.None);\r\n\r\n                matrix.gameState = GameState.XTurn;\r\n                app.stateChange(testCell);\r\n\r\n                expect(testCell.state).toBe(State.X);\r\n\r\n\r\n              }));\r\n\r\n    it('should advance the board state on the matrix service',\r\n       inject([TicTacToeNg2AppComponent, MatrixService],\r\n              (app: TicTacToeNg2AppComponent, matrix: MatrixService) => {\r\n\r\n                initApp(app);\r\n\r\n                let testCell = matrix.winLines[0][0];\r\n                if (testCell.state != State.None) {\r\n                  testCell = matrix.winLines[0][1];\r\n                }\r\n\r\n                spyOn(matrix, 'advanceBoardState');\r\n                expect(matrix.advanceBoardState).not.toHaveBeenCalled();\r\n\r\n                app.stateChange(testCell);\r\n\r\n                expect(matrix.advanceBoardState).toHaveBeenCalled();\r\n              }));\r\n\r\n\r\n  });\r\n\r\n  describe('computerTurn()', () => {\r\n\r\n    it('should exit immediately if it is not computer turn, or the game is won or drawn',\r\n       inject([TicTacToeNg2AppComponent, StrategyService, MatrixService],\r\n              (app: TicTacToeNg2AppComponent, strategy: StrategyService, matrix: MatrixService) => {\r\n\r\n                initApp(app);\r\n\r\n                spyOn(strategy, 'executeStrategy');\r\n                expect(strategy.executeStrategy).not.toHaveBeenCalled();\r\n\r\n                triggerDraw(matrix.winLines);\r\n                matrix.gameState = matrix.computerTurn;\r\n                app.stateChange(matrix.winLines[0][0]);\r\n\r\n                expect(strategy.executeStrategy).not.toHaveBeenCalled();\r\n\r\n              }));\r\n\r\n    it('should call the strategy method on the strategy service',\r\n       inject([TicTacToeNg2AppComponent, StrategyService, MatrixService],\r\n              (app: TicTacToeNg2AppComponent, strategy: StrategyService, matrix: MatrixService) => {\r\n\r\n                initApp(app);\r\n\r\n                spyOn(strategy, 'executeStrategy');\r\n                expect(strategy.executeStrategy).not.toHaveBeenCalled();\r\n\r\n                matrix.gameState =\r\n                    matrix.computerTurn === GameState.XTurn ? GameState.OTurn : GameState.XTurn;\r\n                app.stateChange(matrix.winLines[0][0]);\r\n\r\n                expect(strategy.executeStrategy).toHaveBeenCalled();\r\n\r\n              }));\r\n\r\n    it('should advance the board state',\r\n       inject([TicTacToeNg2AppComponent, MatrixService],\r\n              (app: TicTacToeNg2AppComponent, matrix: MatrixService) => {\r\n\r\n                initApp(app);\r\n\r\n                spyOn(matrix, 'advanceBoardState');\r\n                expect(matrix.advanceBoardState).not.toHaveBeenCalled();\r\n\r\n                matrix.gameState =\r\n                    matrix.computerTurn === GameState.XTurn ? GameState.OTurn : GameState.XTurn;\r\n                app.stateChange(matrix.winLines[0][0]);\r\n\r\n                expect(matrix.advanceBoardState).toHaveBeenCalled();\r\n\r\n              }));\r\n  });\r\n\r\n  describe(\"reset()\", () => {\r\n\r\n    it('should call reset on the matrix service',\r\n       inject([TicTacToeNg2AppComponent, MatrixService],\r\n              (app: TicTacToeNg2AppComponent, matrix: MatrixService) => {\r\n\r\n                initApp(app);\r\n\r\n                spyOn(matrix, 'reset');\r\n                expect(matrix.reset).not.toHaveBeenCalled();\r\n\r\n                app.reset();\r\n\r\n                expect(matrix.reset).toHaveBeenCalled();\r\n\r\n              }));\r\n\r\n    it('should update yourAreX',\r\n       inject([TicTacToeNg2AppComponent, MatrixService],\r\n              (app: TicTacToeNg2AppComponent, matrix: MatrixService) => {\r\n\r\n                initApp(app);\r\n\r\n                app.reset();\r\n\r\n                expect(app.youAreX).toBe(matrix.computerTurn === GameState.XTurn ? false : true);\r\n\r\n              }));\r\n\r\n  });\r\n\r\n  describe(\"easyMode()\", () => {\r\n\r\n    it('should reflect the mode on the strategy service',\r\n       inject([TicTacToeNg2AppComponent, StrategyService],\r\n              (app: TicTacToeNg2AppComponent, strategy: StrategyService) => {\r\n\r\n                initApp(app);\r\n\r\n                expect(app.easyMode).toBe(strategy.easyMode);\r\n\r\n                strategy.easyMode = !strategy.easyMode;\r\n\r\n                expect(app.easyMode).toBe(strategy.easyMode);\r\n              }));\r\n\r\n    it('should set the mode on the strategy service',\r\n       inject([TicTacToeNg2AppComponent, StrategyService],\r\n              (app: TicTacToeNg2AppComponent, strategy: StrategyService) => {\r\n\r\n                initApp(app);\r\n\r\n                let targetMode = !strategy.easyMode;\r\n\r\n                app.easyMode = targetMode;\r\n\r\n                expect(strategy.easyMode).toBe(targetMode);\r\n              }));\r\n\r\n  });\r\n\r\n});\r\n"]}