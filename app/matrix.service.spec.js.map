{"version":3,"file":"matrix.service.spec.js","sourceRoot":"","sources":["matrix.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {beforeEachProviders, it, describe, expect, inject} from '@angular/core/testing';\r\nimport {MatrixService, GameState, State} from './matrix.service';\r\n\r\nfunction mapTemplateToService(service: MatrixService, template: State[]) {\r\n  let row = 0, col = 0, idx = 0;\r\n  while (row < 3) {\r\n    service.rows[row][col].state = template[idx];\r\n    idx += 1;\r\n    col += 1;\r\n    if (col === 3) {\r\n      col = 0;\r\n      row += 1;\r\n    }\r\n  }\r\n}\r\n\r\ndescribe('Matrix Service', () => {\r\n  beforeEachProviders(() => [MatrixService]);\r\n\r\n  it('should initialize to game state of X-turn',\r\n     inject([MatrixService],\r\n            (service: MatrixService) => { expect(service.gameState).toBe(GameState.XTurn); }));\r\n\r\n  it('should initialize all rows to State.None',\r\n     inject([MatrixService], (service: MatrixService) => {\r\n       for (let idx = 0; idx < service.rows.length; idx += 1) {\r\n         for (let col = 0; col < service.rows[idx].length; col += 1) {\r\n           expect(service.rows[idx][col].state).toBe(State.None);\r\n         }\r\n       }\r\n     }));\r\n\r\n  describe(\"reset()\", () => {\r\n    it('should initialize to game state of X-turn',\r\n       inject([MatrixService], (service: MatrixService) => {\r\n         service.gameState = GameState.Won;\r\n         service.reset();\r\n         expect(service.gameState).toBe(GameState.XTurn);\r\n       }));\r\n\r\n    it('should initialize all rows to empty X-turn',\r\n       inject([MatrixService], (service: MatrixService) => {\r\n         service.rows[0][0].state = State.X;\r\n         service.rows[1][1].state = State.O;\r\n         service.reset();\r\n         for (let idx = 0; idx < service.rows.length; idx += 1) {\r\n           for (let col = 0; col < service.rows[idx].length; col += 1) {\r\n             expect(service.rows[idx][col].state).toBe(State.None);\r\n           }\r\n         }\r\n       }));\r\n  });\r\n\r\n  describe(\"advanceBoardState()\", () => {\r\n    it('should swap the turn', inject([MatrixService], (service: MatrixService) => {\r\n         expect(service.gameState).toBe(GameState.XTurn);\r\n         service.advanceBoardState();\r\n         expect(service.gameState).toBe(GameState.OTurn);\r\n       }));\r\n\r\n    it('should call a draw when the board cannot be won',\r\n       inject([MatrixService], (service: MatrixService) => {\r\n         expect(service.gameState).toBe(GameState.XTurn);\r\n\r\n         mapTemplateToService(\r\n             service,\r\n             [State.X, State.O, State.None, State.O, State.O, State.X, State.X, State.X, State.O]);\r\n\r\n         service.advanceBoardState();\r\n\r\n         expect(service.gameState).toBe(GameState.Draw);\r\n\r\n       }));\r\n\r\n    it('should call a win when there is a winning row',\r\n       inject([MatrixService], (service: MatrixService) => {\r\n\r\n         expect(service.gameState).toBe(GameState.XTurn);\r\n\r\n         mapTemplateToService(\r\n             service,\r\n             [State.X, State.X, State.X, State.O, State.O, State.X, State.X, State.X, State.O]);\r\n\r\n         service.advanceBoardState();\r\n\r\n         expect(service.gameState).toBe(GameState.Won);\r\n\r\n       }));\r\n\r\n    it('should set the cell winningCell property to true when it is in a winning row',\r\n       inject([MatrixService], (service: MatrixService) => {\r\n\r\n         mapTemplateToService(\r\n             service,\r\n             [State.X, State.X, State.X, State.O, State.O, State.X, State.X, State.X, State.O]);\r\n\r\n         service.advanceBoardState();\r\n\r\n         expect(service.rows[0][0].winningCell).toBe(true);\r\n         expect(service.rows[0][1].winningCell).toBe(true);\r\n         expect(service.rows[0][2].winningCell).toBe(true);\r\n       }));\r\n\r\n\r\n  });\r\n\r\n});\r\n"]}